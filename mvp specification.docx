ALX SOFTWARE ENGINEERING SCHOOL

PORTFOLIO PROJECT

OmniTask+ (Student Edition)
Elevate Your Productivity with Real-Time Communication, Smart Chat Algorithms, and Student-Focused Features.

MVP Specification

By: Lomotey Okantah Emmanuel (LEO)

Introduction

The Minimum Viable Product (MVP) of OmniTask+ (Student Edition) aims to deliver essential features tailored to student productivity and collaboration needs. This MVP will provide a solid foundation for further enhancements and iterations based on user feedback and requirements.

Primary Features of the MVP
Task Management Features:
Task Creation: Students can create tasks with title, description, deadline, and priority.
Task Assignment: Tasks can be assigned to individual students or study groups.
Task Tracking: Students can track task progress and receive deadline reminders.
Deadline Management: The platform sends alerts and notifications for upcoming deadlines.
Priority Sorting: Tasks can be sorted based on priority levels.
Student-Focused Features:
Pomodoro Timer Integration: Built-in Pomodoro timer functionality to encourage focused work sessions.
Virtual Study Sessions: Students can connect with peers for collaborative learning sessions.

Architecture
OmniTask+ MVP Architecture click here

Description:
Frontend (Client-Side):
React Components: User interfaces for task management, chat messaging, and video calls.
Redux (optional): State management for handling application data.
Material-UI: UI component library for consistent design.
WebSocket: Real-time communication for chat messaging.
SimpleWebRTC: Video call feature integration.
React JWT: Authentication and user data security at the frontend.
Backend (Server-Side):
Flask: Web framework for backend development.
Flask-SocketIO: Real-time communication for chat messaging.
MySQL: Database for storing user data, tasks, and session information.
Flask JWT: Authentication and user data security.
AES Encryption: Encryption for securing sensitive data.

Communication:
WebSocket: Bidirectional communication protocol for real-time chat messaging between clients and the server.
SimpleWebRTC: WebRTC integration for video calls, enabling peer-to-peer communication.

Future Enhancements:
Real-time Chat Messaging System: Implement WebSocket communication and endpoints for message handling.
Video Call Feature: Integrate WebRTC for peer-to-peer video calls with frontend React interface.
Rewarding System: Develop a points-based system for task completion and participation in virtual study sessions.
Smart Chat Algorithms: Implement algorithms to analyze user interactions and provide personalized task recommendations and study resources.

APIs and Methods

API Routes for Web Client to Web Server Communication:
`/api/tasks`
GET: Retrieves tasks associated with the logged-in user.
POST: Creates a new task with provided details (title, description, deadline, priority).

`/api/task/:id`
GET: Retrieves details of a specific task identified by its ID.
PUT: Updates an existing task with new details.
DELETE: Deletes a task specified by its ID.

`/api/study_sessions`
GET: Retrieves upcoming virtual study sessions for the logged-in user.
POST: Creates a new virtual study session with provided details (date, time, participants).

`/api/study_session/:id`
GET: Retrieves details of a specific study session identified by its ID.
PUT: Updates details of an existing study session.
DELETE: Cancels a study session specified by its ID.

API Endpoints or Functions/Methods for External Clients:
Class: TaskManager
Function: `getTasks(userId)`
Description: Retrieves tasks associated with a user identified by their ID.

Class: StudySessionManager
Function: `createSession(sessionDetails)`
Description: Creates a new virtual study session with provided details.
Function: `cancelSession(sessionId)`
Description: Cancels a study session specified by its ID.

Class: UserManager
Function: `getUserInfo(sessionId)`
Description: Retrieves user information based on their session ID.

3rd Party APIs:
Arrow (Date and Time Manipulation Library)
   - **Description:** Provides functionality for date and time manipulation.
   - **API Documentation:** [Arrow Documentation](https://arrow.readthedocs.io/en/latest/#api-guide)

Google Calendar API
Description: Allows integration with Google Calendar for scheduling and managing study sessions.
Endpoints:
`POST /api/calendar/events`: Creates a new event in the user's Google Calendar.
`PUT /api/calendar/events/:id`: Updates an existing event with new details.
`DELETE /api/calendar/events/:id`: Deletes an event specified by its ID.

Data Model
The data model for OmniTask+ (Student Edition) is designed to efficiently store and manage information related to tasks, study sessions, users, and their relationships. Below is the data model diagram created using SqlDBM:

Data Model Diagram click here

Database:
Database Name: omnidb

Tables:
users
tasks
study_sessions

Users Table: users
user_id: INT (Primary Key)
username: VARCHAR(50)
email: VARCHAR(100)
password: VARCHAR(255)
created_at: DATETIME
updated_at: DATETIME

Tasks Table: tasks
task_id: INT (Primary Key)
user_id: INT (Foreign Key referencing Users.user_id)
title: VARCHAR(100)
description: TEXT
deadline: DATETIME
priority: ENUM('Low', 'Medium', 'High')
status: ENUM('Pending', 'In Progress', 'Completed')
created_at: DATETIME
updated_at: DATETIME

Study_Sessions Table: study_sessions
session_id: INT (Primary Key)
user_id: INT (Foreign Key referencing Users.user_id)
session_name: VARCHAR(100)
start_time: DATETIME
end_time: DATETIME
participants: TEXT
created_at: DATETIME
updated_at: DATETIME

Relations:
Each user can have multiple tasks, establishing a one-to-many relationship between users and tasks (one user to many tasks). The `user_id` in the tasks table serves as a foreign key (FK) referencing the Users table.
Each user can participate in multiple study sessions, establishing a one-to-many relationship between users and study_sessions (one user to many study sessions). The `user_id` in the study_sessions table serves as a foreign key(FK) referencing the users table.

User Stories
1. As a student, I want to be able to create tasks with titles, descriptions, deadlines, and priorities, so I can effectively manage my assignments and study schedule.

2. As a student, I want to join virtual study sessions with peers who share similar study schedules or goals, so I can collaborate and study effectively in a group setting.

3. As a student, I want to utilize the Pomodoro timer integration to focus on my tasks and improve my time management skills during study sessions.

4. As a student, I want to receive reminders for upcoming task deadlines to ensure timely completion of assignments and projects.

5. As a student, I want to track the progress of my tasks and view them sorted by priority, so I can prioritize my work and focus on high-priority items first.

Mockups
Mockup for Login, signup, landing page and video call interface: OmniTask+ Student Edition.pdf
Mockup and UI design for Task Management Interface: click here
Conclusion
The MVP of OmniTask+ (Student Edition) focuses on delivering essential features for task management, collaboration, and productivity enhancement tailored to student needs. This MVP architecture provides a clear roadmap for implementing core functionalities and lays the groundwork for future upgrades and enhancements.

## Progress

### Rating
On a scale of 1 to 10, I would rate our progress this week as a 5.

### Explanation
This week, our team focused on the development of the OmniTask+ (Student Edition) MVP, achieving some milestones but also facing significant challenges. We successfully implemented task creation, assignment, and tracking features, which are crucial for the core functionality of the application aimed at enhancing student productivity.

However, our progress was notably impacted by the inability to implement several planned features. The integration of WebSocket for real-time chat, SimpleWebRTC for video calls, the Pomodoro timer algorithm, and the setup for virtual study sessions were not initiated as planned. These components are essential for the application's goal of facilitating real-time communication and focused study sessions, and their absence represents a significant gap in our current MVP development phase.

### Completed Aspects
- Task creation, assignment, and tracking features.

### Incomplete Aspects
- Real-time chat messaging system.
- Video call feature integration.
- Pomodoro timer algorithm implementation.
- Setup for virtual study sessions.

## Challenges

### Technical Challenge
The integration of WebSocket for real-time communication emerged as the most significant technical challenge this week. The task of creating a reliable, efficient real-time chat messaging system presented numerous difficulties, including ensuring low latency, maintaining high reliability across different network conditions, and scaling the architecture to support an increasing number of concurrent users without compromising performance. These challenges required a deep dive into WebSocket protocols, network optimization strategies, and server management, which proved to be both time-consuming and technically demanding.

### Non-Technical Challenge
Our team's remote work setup posed the most significant non-technical challenge, particularly in coordinating across different time zones. This situation made it difficult to synchronize work schedules, leading to communication gaps and delays in feedback. Despite adopting strategies such as regular virtual meetings and using collaborative tools for task management, maintaining a cohesive team dynamic and high motivation levels in a remote setting was challenging. This underscored the need for continuous effort in team management and adaptability to maintain project momentum.

## Screenshots
*Screenshot 1: Task Management Interface*
![Task Management Interface](URL_to_screenshot_1)

*Screenshot 2: Placeholder for Virtual Study Session Setup*
![Placeholder for Virtual Study Session Setup](URL_to_screenshot_2)

(Note: Replace "URL_to_screenshot_1" and "URL_to_screenshot_2" with the actual URLs of the screenshots.)
